package com.examplefg.malwarechecker;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.SearchView;
import android.widget.Toast;

import com.examplefg.malwarechecker.Control.ScannerAdapter;
import com.examplefg.malwarechecker.Control.Utils.ItemClickSupport;
import com.examplefg.malwarechecker.Control.Utils.PredictionAsyncTask;
import com.examplefg.malwarechecker.Model.Appli;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

public class ScannerActivity extends AppCompatActivity implements PredictionAsyncTask.Listeners {

    @BindView(R.id.activity_scanner_recyclerView) RecyclerView mRecyclerView;
    private ScannerAdapter adapter;
    private Appli appToScan;
    private PackageManager packageManager;
    public static ArrayList<String> permissionsTest; //liste des permissions caractéristiques
    private String appSignature; //vecteur des caractéristique pour la prediction
    private final String PREDICTION_API_URL = "https://malware-prediction-api.herokuapp.com/predict";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scanner);

        //instancier le package manager
        this.packageManager = this.getPackageManager();

        //initaliser la liste des caractéristique
        initialiseFeaturePermissions();

        //relier les vues
        ButterKnife.bind(this);

        //activer la Toolbar
        this.configureToolbar();

        //configurer et afficher le RecyclerView
        this.configureRecyclerView();

        //configurer les cliques sur le RecyclerView
        //this.configureOnClickRecyclerView();

        Appli app = new Appli("app","app",null);
        app.setPermissions("0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,0");

        String jsonString = "{\"permissions\":\"0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,0\"}";
        new PredictionAsyncTask(this).execute(PREDICTION_API_URL,jsonString);
    }

    //permet de configuer la Toolbar pour et l'afficher pour cette activity
    private void configureToolbar()
    {
        Toolbar toolbar = (Toolbar)findViewById(R.id.appToolbar);
        toolbar.setTitle("Scanner");
        setSupportActionBar(toolbar);
    }

    //avant l'execution de la tache (requete reseau)
    @Override
    public void onPreExecute() {
        Toast.makeText(ScannerActivity.this,"Wait For It",Toast.LENGTH_SHORT).show();
    }

    //après l'exécution de la tache
    @Override
    public void onPostExecute(String success) {

        Toast.makeText(ScannerActivity.this,success,Toast.LENGTH_LONG).show();
        System.out.println(Character.getNumericValue(success.charAt(1)));
    }

    //pendant l'exécution de la tache
    @Override
    public String doInBackground() {
        return null;
    }

    @Override
    //permet de relier le menu a la toolbar
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.scanner_activity_menu,menu);

        MenuItem searchItem = menu.findItem(R.id.activity_scanner_item_search);
        SearchView searchView = (SearchView) searchItem.getActionView();

        searchView.setIconifiedByDefault(false);
        searchView.requestFocus();

        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                adapter.getFilter().filter(newText);
                return false;
            }
        });

        return true;
    }

    //extraire les infos packages des applications installées
    private ArrayList<Appli> getInstalledApplication()
    {
        ArrayList<Appli> listeApplis = new ArrayList<Appli>();

        //recource pour extraire les infos sur les application installées
        PackageManager packageManager = this.getPackageManager();

        //extraire les application installées
        List<PackageInfo> pi = packageManager.getInstalledPackages(packageManager.GET_PERMISSIONS);//flag pour permettre extraction de permission de lappli selectionnée

        //filtrer les applications système
        for(PackageInfo packageInfo : pi)
        {
            Appli app;
            //si l'application ne contient pas de intent de lancement alors c'est une application système
            if(packageManager.getLaunchIntentForPackage(packageInfo.packageName) != null)
            {
                //sauvegarder nom de package
                String packageName = packageInfo.packageName;
                String appLabel = null;
                Drawable appIcone = null;
                try
                {
                    //extraire label de l'application
                    ApplicationInfo appInfo = packageManager.getApplicationInfo(packageName,packageManager.GET_META_DATA);
                    appLabel = (String)packageManager.getApplicationLabel(appInfo);
                    //extraire icone de l'application
                    appIcone = packageManager.getApplicationIcon(packageInfo.packageName); //get l'icon de l'application

                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }

                //creer objet Appli
                app = new Appli(appLabel,packageName,appIcone);
                //ajouter a la liste des applis
                listeApplis.add(app);
            }
        }
        return listeApplis;
    }

    private void configureRecyclerView() {
        //preparer les PackagesInfos
        ArrayList<Appli> listeAppli = this.getInstalledApplication();

        //instancier l'adapter
        this.adapter = new ScannerAdapter(listeAppli);

        //relier l'adapter au RecyclerView
        this.mRecyclerView.setAdapter(adapter);

        //relier layout manager au RecyclerView (standard code from StackOverflow)
        this.mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
    }



    //Configurer item click on RecyclerView pour gerer les cliques
    private void configureOnClickRecyclerView(){
        ItemClickSupport.addTo(mRecyclerView, R.layout.activity_scanner_item)
                .setOnItemClickListener(new ItemClickSupport.OnItemClickListener() {
                    @Override
                    public void onItemClicked(RecyclerView recyclerView, int position, View v) {
                        //recupérer l'application sélectionnée
                        appToScan = adapter.getAppli(position);
                        //recuperer les permission de l'application sélectionnée
                        appToScan.setPermissionsPropres(getAppPermissions(appToScan.getPackageName()));

                        appSignature = buildAppSignature(appToScan);

                        System.out.println(permissionsTest);
                        System.out.println(appSignature);
                    }
                });
    }

    // obtenir lespermissions d'une application
    private ArrayList<String> getAppPermissions(String packageName)
    {
        ArrayList<String> permissionsListe = new ArrayList<String>();
        try
        {
            PackageInfo packageInfo = packageManager.getPackageInfo(packageName,packageManager.GET_PERMISSIONS);
            String[] permissions = packageInfo.requestedPermissions;
            for(int i=0; i<permissions.length; i++)
            {
                permissionsListe.add(permissions[i]);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        return permissionsListe;
    }

    //construit le vecteur pour la prediction de l'observation (l'application)
    private String buildAppSignature(Appli app)
    {
        StringBuffer appSignature = new StringBuffer();

        for(String permission : permissionsTest)
        {
            //si l'application analysée contient la permission caractéristique
            if(app.getPermissions().contains(permission))
            {
                appSignature.append("1,");
            }
            else
            {
                appSignature.append("0,");
            }
        }

        return appSignature.toString().substring(0,appSignature.toString().length()-1);
    }


    //initialiser les caractéristiques pour tester les applications
    private void initialiseFeaturePermissions()
    {
        permissionsTest = new ArrayList<String>();
        permissionsTest.addAll(Arrays.asList("android.permission.BLUETOOTH", "android.permission.CAMERA",
                "android.permission.CHANGE_WIFI_STATE",
                "android.permission.DEVICE_POWER",
                "android.permission.DISABLE_KEYGUARD", "android.permission.GET_TASKS",
                "android.permission.INSTALL_PACKAGES", "android.permission.INTERNET",
                "android.permission.MODIFY_AUDIO_SETTINGS",
                "android.permission.MOUNT_UNMOUNT_FILESYSTEMS",
                "android.permission.READ_CALENDAR", "android.permission.READ_CALL_LOG",
                "android.permission.READ_PHONE_STATE", "android.permission.READ_SMS",
                "android.permission.RECEIVE_BOOT_COMPLETED",
                "android.permission.SEND_SMS",
                "android.permission.SET_PREFERRED_APPLICATIONS",
                "android.permission.USE_CREDENTIALS", "android.permission.WAKE_LOCK",
                "android.permission.WRITE_APN_SETTINGS",
                "android.permission.WRITE_SETTINGS", "android.permission.WRITE_SMS",
                "com.android.browser.permission.READ_HISTORY_BOOKMARKS"));
    }
}
