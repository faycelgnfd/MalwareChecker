package com.examplefg.malwarechecker.Control.Activities;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.viewpager.widget.ViewPager;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.examplefg.malwarechecker.Control.Fragments.ScanFragment;
import com.examplefg.malwarechecker.Control.PageAdapter;
import com.examplefg.malwarechecker.Control.Utils.FileUtils;
import com.examplefg.malwarechecker.Control.Utils.PredictionAsyncTask;
import com.examplefg.malwarechecker.Control.Utils.SignatureBuilder;
import com.examplefg.malwarechecker.Control.Utils.ZipManager;
import com.examplefg.malwarechecker.Database.MalwareCheckerDatabase;
import com.examplefg.malwarechecker.Model.Appli;
import com.examplefg.malwarechecker.R;
import com.examplefg.malwarechecker.api.firestore.ApplisHelper;
import com.google.android.material.tabs.TabLayout;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;

public class MainActivity extends AppCompatActivity implements ScanFragment.ScanCallback, PredictionAsyncTask.Listeners{

    private static final int FILE_SELECT_CODE = 0;
    private static final String TAG = "TAG";
    private Appli appToScan;
    private TabLayout tab;
    private final String PREDICTION_API_URL = "https://malware-prediction-api.herokuapp.com/predict";
    private final String PREF_FILE_NAME = "StatFile";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //lier les vues
        ButterKnife.bind(this);

        demandePermissions();

        setContentView(R.layout.activity_main);

        //Configurer et afficher le ViewPager et TabLayout
        configureViewPagerEtTabs();


    }

    //CallBack
    @Override
    public void scanApk() {
        showFileChooser();
    }

    public void configureViewPagerEtTabs()
    {
        //declarer et lier le ViewPager
        ViewPager viewPager = (ViewPager)findViewById(R.id.activity_main_ViewPager);
        //lier le ViewPager avec l'adapter
        viewPager.setAdapter(new PageAdapter(getSupportFragmentManager()));
        //getting the TabLayout
        tab = (TabLayout)findViewById(R.id.activity_main_TabLayout);
        //lier le TabLayout au ViewPager
        tab.setupWithViewPager(viewPager);
        //setting design
        tab.setTabMode(TabLayout.MODE_FIXED);
        //setting the main item
        viewPager.setCurrentItem(1);

        //setting icons and disabling text
        tab.getTabAt(0).setIcon(R.drawable.stats_logo_off)
                .setTabLabelVisibility(TabLayout.TAB_LABEL_VISIBILITY_UNLABELED);
        tab.getTabAt(1).setIcon(R.drawable.home_logo_off)
                .setTabLabelVisibility(TabLayout.TAB_LABEL_VISIBILITY_UNLABELED);
        tab.getTabAt(2).setIcon(R.drawable.history_logo_off)
                .setTabLabelVisibility(TabLayout.TAB_LABEL_VISIBILITY_UNLABELED);

        tab.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                int pos = tab.getPosition();
                if(pos==0)
                    tab.setIcon(R.drawable.stats_logo_on);
                else if(pos==1)
                    tab.setIcon(R.drawable.home_logo_on);
                else
                    tab.setIcon(R.drawable.history_logo_on);
            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {
                int pos = tab.getPosition();
                if(pos==0)
                    tab.setIcon(R.drawable.stats_logo_off);
                else if(pos==1)
                    tab.setIcon(R.drawable.home_logo_off);
                else
                    tab.setIcon(R.drawable.history_logo_off);
            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {

            }
        });
    }

    private void demandePermissions() {
        // in android API >= 23 on doit demander les permissions meme si elles sont deja declarées dans le manifest

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
        }
    }

    private void showFileChooser() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        intent.addCategory(Intent.CATEGORY_OPENABLE);

        try {
            startActivityForResult(
                    Intent.createChooser(intent, "Select a File to Upload"),
                    FILE_SELECT_CODE);
        } catch (android.content.ActivityNotFoundException ex) {
            // Potentially direct the user to the Market with a Dialog
            Toast.makeText(this, "Please install a File Manager.",
                    Toast.LENGTH_SHORT).show();
        }
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        switch (requestCode) {
            case FILE_SELECT_CODE:
                if (resultCode == RESULT_OK) {
                    // Get the Uri of the selected file
                    Uri uri = data.getData();
                    Log.d(TAG, "File Uri: " + uri.toString());
                    //  Toast.makeText(this,"File Uri: " + uri.toString() ,Toast.LENGTH_SHORT).show();

                    FileUtils fileUtils = new FileUtils(this);

                    ZipManager zipManager = new ZipManager();
                    // Get the path
                    String path = null;

                    try {

                        // Extraction du path en utilisnt les methodes de la class FileUtils
                        path = fileUtils.getPath(uri);
                        try
                        {

                            //String ext = "";

                            // verification de l'extension
                            //ext = SignatureBuilder.getInstance().extraxtExtensionFromPath(path);

                            // target est l'emplacement de la decompression de l'apk ( Le manifest de l'apk )
                            String target =path.substring(0,path.lastIndexOf('/'));

                            zipManager.unzip(path, target);

                        } catch (Exception e)
                        {
                            e.printStackTrace();
                            Log.d(TAG, "Unzipping exeption " + e);
                            Toast.makeText(this,"Ce n'est pas un fichier APK ! " ,Toast.LENGTH_LONG).show();
                        }

                        //variable pour indiquer le chemin du AndroidManifest à l'inputStream
                        String pathManifest = path.substring(0,path.lastIndexOf('/')+1)  + "AndroidManifest.xml";

                        File file = new File(pathManifest);

                        InputStream is = new FileInputStream(file.getPath());

                        byte[] bytes = SignatureBuilder.getInstance().isToBytes(is);

                        BufferedReader reader = null;
                        try {
                            int i=1;
                            reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes), "UTF-8"));

                            // reponse est la variable qui va contenir le parsing du maanifest
                            String reponse = new String();
                            for (String line; (line = reader.readLine()) != null; ) {

                                // Remplacement des caracters non UTF-8
                                line = line.replaceAll("[^\\x20-\\x7e]", "");
                                reponse = reponse +" \n" +  line;
                                i++;

                            }

                            //extraire les permissions du parsing
                            ArrayList<String> listPermissions = SignatureBuilder.getInstance().extractPermissions(reponse);

                            //fermer input stream
                            is.close();

                            //supprimer les fichers extraits de l'APK
                            SignatureBuilder.deleteFile(pathManifest);

                            String appName = SignatureBuilder.extraxtAppNameFromPath(path);
                            //construire l'application a scanner
                            appToScan = new Appli(appName,appName);
                            appToScan.setPermissionsPropres(listPermissions);

                            //construire signature de l'application à partir des permissions
                            String signature = SignatureBuilder.buildAppSignature(appToScan);
                            appToScan.setSignature(signature);

                            appToScan.setIcone(getResources().getDrawable(R.drawable.unknown_app_icon_resizedd));

                            //si connexion internet est disponible
                            if (SignatureBuilder.isNetworkAvailable(MainActivity.this)) {
                                //construire le JSON a envoyer a l'API
                                String jsonString = "{\"permissions\":\"" + appToScan.getSignature() + "\"}";

                                //lancer la requete vers l'API du modèle de prediction
                                new PredictionAsyncTask(MainActivity.this).execute(PREDICTION_API_URL, jsonString);

                            } else {
                                Toast.makeText(MainActivity.this, "Pas de connexion internet", Toast.LENGTH_SHORT).show();
                            }



                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        super.onActivityResult(requestCode, resultCode, data);


                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
        }
    }

    //avant l'execution de la tache (requete reseau)
    @Override
    public void onPreExecute() {
        Toast.makeText(MainActivity.this, "Wait For It", Toast.LENGTH_SHORT).show();
    }

    //après l'exécution de la tache
    @Override
    public void onPostExecute(String success) {
        //recuperation de la prediction de du modèle
        int prediction = Character.getNumericValue(success.charAt(1));

        //recuperer le fichier de preferences (statistics)
        SharedPreferences stats = getSharedPreferences(PREF_FILE_NAME, MODE_PRIVATE);

        //mettre à jour le nombre d'application scannées
        stats.edit().putInt("application_scanned", stats.getInt("application_scanned", 0) + 1);

        //si l'application n'est pas dangereuse
        if (prediction == 0) {
            appToScan.setMalware(false);
            Toast.makeText(MainActivity.this, "Goodware", Toast.LENGTH_LONG).show();
            System.out.println("Goodware");
            stats.edit().putInt("goodwares", stats.getInt("goodwares", 0) + 1).apply();
        } else {
            appToScan.setMalware(true);
            Toast.makeText(MainActivity.this, "Malware", Toast.LENGTH_LONG).show();
            System.out.println("Malware");
            stats.edit().putInt("malwares", stats.getInt("malwares", 0) + 1).apply();
        }


        //incrementer stats
        stats.edit().putInt("application_scanned", stats.getInt("application_scanned", 0) + 1).apply();

        //ajouter l'appli scannée à la base de données
        ScannerActivity.sauvegarderAppliBdd(this,appToScan);

        //ajouter des infos de l'application scannées à firestore (BDD cloud)
        ApplisHelper.createAppli(appToScan.getPackageName(), appToScan.getLabel(), appToScan.getSignature(), appToScan.isMalware())
                .addOnFailureListener(ScannerActivity.onFailureListener(MainActivity.this));

        //afficher le resultat sous forme de dialog
        showPopup(MainActivity.this,appToScan);
    }

    //pendant l'exécution de la tache
    @Override
    public String doInBackground() {
        return null;
    }


    public void showPopup(Context context,Appli appli){


        View dialogView = getLayoutInflater().inflate(R.layout.custom_popup,null);

        ImageView popAppIcon = (ImageView)dialogView.findViewById(R.id.custom_popup_app_icone);
        TextView popAppName = (TextView)dialogView.findViewById(R.id.custom_popup_app_name);
        TextView popAppResult = (TextView)dialogView.findViewById(R.id.custom_popup_scan_result);
        TextView popAppResultMsg = (TextView)dialogView.findViewById(R.id.custom_popup_scan_result_msg);
        LinearLayout popLayout = (LinearLayout)dialogView.findViewById(R.id.custom_popup_layout_scan_popup);


        Glide.with(context)
                .load(appli.getIcone())
                .circleCrop()
                .into(popAppIcon);

        popAppName.setText(appli.getLabel());
        if(appli.isMalware())
        {
            popAppResult.setText(R.string.popup_scan_result_malware);
            popAppResultMsg.setText(R.string.popup_scan_result_malware_msg);
            popLayout.setBackgroundColor(context.getResources().getColor(R.color.malwareRed));
        }
        else
        {
            popAppResult.setText(R.string.popup_scan_result_goodware);
            popAppResultMsg.setText(R.string.popup_scan_result_goodware_msg);
            popLayout.setBackgroundColor(context.getResources().getColor(R.color.goodwareGreen));
        }

        Dialog myDialog = new Dialog(this,R.style.dialogstyle);
        myDialog.setContentView(dialogView);
        myDialog.setCancelable(true);

        myDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        myDialog.show();
    }


}
