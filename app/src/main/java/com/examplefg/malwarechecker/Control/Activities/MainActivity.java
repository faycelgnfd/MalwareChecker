package com.examplefg.malwarechecker.Control.Activities;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.viewpager.widget.ViewPager;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.examplefg.malwarechecker.Control.PageAdapter;
import com.examplefg.malwarechecker.Control.Utils.FileUtils;
import com.examplefg.malwarechecker.Control.Utils.ZipManager;
import com.examplefg.malwarechecker.Database.MalwareCheckerDatabase;
import com.examplefg.malwarechecker.Model.Appli;
import com.examplefg.malwarechecker.R;
import com.google.android.material.tabs.TabLayout;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;

public class MainActivity extends AppCompatActivity {

    private static final int FILE_SELECT_CODE = 0;
    private static final String TAG = "TAG";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        setContentView(R.layout.activity_main);

        //Configurer et afficher le ViewPager et TabLayout
        configureViewPagerEtTabs();

    }


    public void configureViewPagerEtTabs()
    {
        //declarer et lier le ViewPager
        ViewPager viewPager = (ViewPager)findViewById(R.id.activity_main_ViewPager);
        //lier le ViewPager avec l'adapter
        viewPager.setAdapter(new PageAdapter(getSupportFragmentManager()));
        //getting the TabLayout
        TabLayout tab = (TabLayout)findViewById(R.id.activity_main_TabLayout);
        //lier le TabLayout au ViewPager
        tab.setupWithViewPager(viewPager);
        //setting design
        tab.setTabMode(TabLayout.MODE_FIXED);
    }

    private void demandePermissions() {
        // in android API >= 23 on doit demander les permissions meme si elles sont deja declar√©es dans le manifest

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
        }
    }

    private void showFileChooser() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        intent.addCategory(Intent.CATEGORY_OPENABLE);

        try {
            startActivityForResult(
                    Intent.createChooser(intent, "Select a File to Upload"),
                    FILE_SELECT_CODE);
        } catch (android.content.ActivityNotFoundException ex) {
            // Potentially direct the user to the Market with a Dialog
            Toast.makeText(this, "Please install a File Manager.",
                    Toast.LENGTH_SHORT).show();
        }
    }

    public static ArrayList<String> extractPermissions ( String s) {

        ArrayList<String> l = new ArrayList<String>();

        String temp = "";


        int i=0;

        while(i<s.length())
        {
            if(s.charAt(i)=='a')
            {
                String nv = s.substring(i, i+19);
                int j = i+19;
                //System.out.println("string extracted nv is : "+nv);

                if(nv.equals("android.permission."))
                {
                    temp = temp +nv;
                    while(  (  j<s.length()) && (isMaj(s.charAt(j))) )
                    {
                        temp = temp + s.charAt(j);
                        //System.out.println("temp : "+temp);
                        j++;
                    }
                    //System.out.println("\ntemp a l sortie de j : "+ temp);

                    i=i+temp.length();
                    l.add(temp);
                    temp ="";
                }
                else
                {
                    i++;
                }
            }
            else if (s.charAt(i)=='c') {
                String nv = s.substring(i, i + 31);
                int j = i + 31;
                //System.out.println("string extracted nv is : "+nv);

                if (nv.equals("com.android.browser.permission."))
                {
                    temp = temp + nv;
                    while ((j < s.length()) && (isMaj(s.charAt(j)))) {
                        temp = temp + s.charAt(j);
                        //System.out.println("temp : "+temp);
                        j++;
                    }
                    //System.out.println("\ntemp a l sortie de j : "+ temp);

                    i = i + temp.length();
                    l.add(temp);
                    temp = "";

                }
                else
                {
                    i++;
                }

            }
            else
            {
                i++;
            }

        }

        return l;
    }

    public static boolean isMaj ( char c) {

        if(  ( c >= 'A' && c<= 'Z' ) || (c=='_') )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private String extraxtExtensionFromPath(String path) {

        String extension = path.substring(path.lastIndexOf("."));
        return extension;
    }

    private String extraxtAppNameFromPath(String path) {

        String appName = path.substring(path.lastIndexOf("/"));
        String name = appName.substring(1);

        return name;
    }

    // Input stream to bytes
    public byte[] isToBytes(InputStream is) throws IOException {

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();

        int nRead;
        byte[] data = new byte[16384];

        while ((nRead = is.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }

        return buffer.toByteArray();
    }



    protected void onActivityResult(int requestCode, int resultCode, Intent data) {


        switch (requestCode) {
            case FILE_SELECT_CODE:
                if (resultCode == RESULT_OK) {
                    // Get the Uri of the selected file
                    Uri uri = data.getData();
                    Log.d(TAG, "File Uri: " + uri.toString());
                    //  Toast.makeText(this,"File Uri: " + uri.toString() ,Toast.LENGTH_SHORT).show();

                    FileUtils fileUtils = new FileUtils(this);

                    ZipManager zipManager = new ZipManager();
                    // Get the path
                    String path = null;

                    try {

                        // Extraction du path en utilisnt les methodes de la class FileUtils
                        path = fileUtils.getPath(uri);
                        try
                        {

                            String ext = "";

                            // verification de l'extension
                            ext = extraxtExtensionFromPath(path);

                            // target est l'emplacement de la decompression de l'apk ( Le manifest de l'apk )
                            String target =path.substring(0,path.lastIndexOf('/'));


                            if( ext.equals(".apk") || ext.equals("apk") )
                            {
                                zipManager.unzip(path, target);
                            }
                            else
                            {
                                Toast.makeText(this,"Ce n'est pas un fichier APK ! " ,Toast.LENGTH_LONG).show();

                            }



                        } catch (Exception e)
                        {
                            e.printStackTrace();
                            Log.d(TAG, "Unzipping exeption " + e);
                        }

                        // Methodes testing :
                        /* Testing methodes
                        String ext = extraxtExtensionFromPath(path);
                        Toast.makeText(this,"Extension ::  -->  " + ext ,Toast.LENGTH_LONG).show();
                        String name = extraxtAppNameFromPath(path);
                        Toast.makeText(this,"App name ::  -->  " + name ,Toast.LENGTH_LONG).show();
                        String namex = extraxtAppNameFromPathWithoutExtension(path);
                        Toast.makeText(this,"App name no ex  ::  -->  " + namex ,Toast.LENGTH_LONG).show();
                        */

                        String pathManifest = path.substring(0,path.lastIndexOf('/')+1)  + "AndroidManifest.xml";

                        File file = new File(pathManifest);

                        InputStream is = new FileInputStream(file.getPath());

                        byte[] bytes = isToBytes(is);

                        BufferedReader reader = null;
                        try {
                            int i=1;
                            reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes), "UTF-8"));

                            // reponse est la variable qui va contenir le parsing du maanifest
                            String reponse = new String();
                            for (String line; (line = reader.readLine()) != null; ) {

                                // Remplacement des caracters non UTF-8
                                line = line.replaceAll("[^\\x20-\\x7e]", "");
                                reponse = reponse +" \n" +  line;
                                i++;

                            }

                            ArrayList<String> listPermissions = new ArrayList<String>();

                            listPermissions = extractPermissions(reponse);



                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        //  Log.d(TAG, "File Path: " + path);


                        super.onActivityResult(requestCode, resultCode, data);


                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }


        }


    }


}
