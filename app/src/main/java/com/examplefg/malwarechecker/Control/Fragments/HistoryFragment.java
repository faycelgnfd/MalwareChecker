package com.examplefg.malwarechecker.Control.Fragments;


import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.examplefg.malwarechecker.Control.HistoryAdapter;
import com.examplefg.malwarechecker.Control.Utils.CustomDialog;
import com.examplefg.malwarechecker.Control.Utils.PredictionAsyncTask;
import com.examplefg.malwarechecker.Database.MalwareCheckerDatabase;
import com.examplefg.malwarechecker.Model.Appli;
import com.examplefg.malwarechecker.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.util.List;
import java.util.zip.Inflater;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * A simple {@link Fragment} subclass.
 */


public class HistoryFragment extends Fragment implements View.OnClickListener {

    RecyclerView mRecyclerView;
    HistoryAdapter adapter;
    SwipeRefreshLayout mSwipeRefreshLayout;


    CustomDialog customDialog = new CustomDialog(getActivity());


    AlertDialog dialog ;



    public HistoryFragment() {
        // Required empty public constructor
    }

    public static HistoryFragment getInstance()
    {
        return new HistoryFragment();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {



        // Inflate the layout for this fragment
        View result =  inflater.inflate(R.layout.fragment_history, container, false);

        //lier les vues
        mRecyclerView = (RecyclerView)result.findViewById(R.id.fragment_history_recyclerView);
        mSwipeRefreshLayout = (SwipeRefreshLayout)result.findViewById(R.id.fragment_history_swipeRefreshLayout);
        mSwipeRefreshLayout.setColorSchemeResources(R.color.colorAccent);

        //configurer et afficher le RecyclerView de l'historique
        configurerHistoryRecycleView();

        //configuration de la fonctionnalité swipe to delete (suppression)
        new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0,ItemTouchHelper.LEFT) {
            @Override
            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
                return false;
            }

            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {

                int position = viewHolder.getAdapterPosition();
                //supprimer l'appli de la base de données
                MalwareCheckerDatabase.getInstance(getActivity()).appliDao().deleteAppli(
                        adapter.getAppliAt(position)
                );
                //supprimer l'appli de la liste du RecyclerView
                adapter.removeAppliAt(position);
                //refresh
                adapter.notifyDataSetChanged();


            }
        }).attachToRecyclerView(mRecyclerView);

        //configuration du bouton flottant
        FloatingActionButton fab = result.findViewById(R.id.fragment_history_fab);
        fab.setOnClickListener(HistoryFragment.this);


        //configuration de la foctionnalité swipe to refresh (actualisation)
        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                configurerHistoryRecycleView();
                mSwipeRefreshLayout.setRefreshing(false);
            }
        });

        //Configurer les buttons de suppression
        View vi = getLayoutInflater().inflate(R.layout.custom_yes_no,null);
        Button btnAnnuler = (Button) vi.findViewById(R.id.btnAnnuler);
        btnAnnuler.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("onClickEffacer onClickEffacer onClickEffacer onClickEffacer onClickEffacer onClickEffacer");

            }
        });

        Button btnEffacer = (Button) vi.findViewById(R.id.btnEffacer);
        btnEffacer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("onClickEffacer onClickEffacer onClickEffacer onClickEffacer onClickEffacer onClickEffacer");

            }
        });



        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        LayoutInflater inflater2 = getActivity().getLayoutInflater();

        builder.setView(inflater2.inflate(R.layout.custom_yes_no, null));
        builder.setCancelable(false);
        dialog = builder.create();

        //dialogYesNo.show();

        return result;
    }



    public void configurerHistoryRecycleView()
    {
        //récupérer les applis de la BDD
        List<Appli> applisHistory = MalwareCheckerDatabase.getInstance(getActivity()).appliDao().getApplis();
        //création de l'adapter
        this.adapter = new HistoryAdapter(applisHistory);
        //attaching the adapter to the recyclerView
        this.mRecyclerView.setAdapter(adapter);
        this.mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
    }

    //click on Floating action button pour effacer l'historique
    @Override
    public void onClick(View v) {


        dialog.show();
        /*
        //vider la base de données
        MalwareCheckerDatabase.getInstance(getActivity()).appliDao().deleteAllApplis();
        //vider la liste des Appli
        adapter.removeAllApplis();
        //notifier les changement
        adapter.notifyDataSetChanged();

         */

    }



   /*
    public AlertDialog create()
    {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        LayoutInflater inflater = getActivity().getLayoutInflater();

        builder.setView(inflater.inflate(R.layout.custom_yes_no, null));
        builder.setCancelable(false);
        AlertDialog dialogYesNo = builder.create();

        //dialogYesNo.show();

        return dialogYesNo;
    }

    public void showDialog(AlertDialog alertDialog)
    {
        alertDialog.show();
    }

    public void dismissDialog(AlertDialog alertDialog)
    {
        alertDialog.dismiss();
    }

    */








}
