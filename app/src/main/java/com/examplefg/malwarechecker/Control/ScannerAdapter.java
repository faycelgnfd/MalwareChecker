package com.examplefg.malwarechecker.Control;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.examplefg.malwarechecker.Model.Appli;
import com.examplefg.malwarechecker.R;

import java.util.ArrayList;
import java.util.List;

public class ScannerAdapter extends RecyclerView.Adapter<ScannerViewHolder> implements Filterable {

    //Donneés
    private ArrayList<Appli> listeApplis;
    //liste pour la recherche
    private ArrayList<Appli> listeApplisFull;

    //constructeur
    public ScannerAdapter(ArrayList<Appli> listeApplis)
    {
        this.listeApplis = listeApplis;
        this.listeApplisFull = new ArrayList<Appli>(listeApplis);
    }

    @NonNull
    @Override //inctancier le ViewHolder et relier son layout xml a la classe
    public ScannerViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        Context context = parent.getContext();
        LayoutInflater inflater = LayoutInflater.from(context);
        View view = inflater.inflate(R.layout.activity_scanner_item, parent, false);

        return new ScannerViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ScannerViewHolder holder, int position) {

        holder.updateWithApplication(this.listeApplis.get(position));
    }

    @Override
    public int getItemCount() {
        return this.listeApplis.size();
    }

    //pour recuperer l'Appli avec la position données
    public Appli getAppli(int position)
    {
        return this.listeApplis.get(position);
    }

    /************************** pour la recherche dans le RecyclerView **************************/
    @Override
    public Filter getFilter() {
        return scannerResearchFilter;
    }

    private Filter scannerResearchFilter = new Filter() {
        //la methode de recherche (filtrage)
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            ArrayList<Appli> filtredList = new ArrayList<Appli>();

            if(constraint == null || constraint.length() == 0) //si rien n'est saisie
            {
                filtredList.addAll(listeApplisFull);
            }
            else
            {
                //la chaine à comparer
                String filterPattern = constraint.toString().toLowerCase().trim();

                for(Appli app : listeApplisFull)
                {
                    if(app.getLabel().toLowerCase().contains(filterPattern))
                    {
                        filtredList.add(app);
                    }
                }
            }

            FilterResults results = new FilterResults();
            results.values = filtredList;

            return results;
        }

        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {

            //mettre à jour la liste d'applis à afficher
            listeApplis.clear();
            listeApplis.addAll((ArrayList)results.values);
            notifyDataSetChanged();

        }
    };
}
